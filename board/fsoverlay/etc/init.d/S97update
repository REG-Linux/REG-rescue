#!/bin/bash

# Quit if is not start OR rescue mode is requested OR no update trigger exists
if [ "$1" != "start" ] || [ ! -f /boot/REG_UPDATE ]; then
    exit 0
fi

BOOTCONF="/boot/system-boot.conf"
LOG="/tmp/rescue.log"

# Move REG_UPDATE to /tmp to not loop rescue mode
if mount -o remount,rw /boot >>"$LOG" 2>&1; then
    rm /boot/REG_UPDATE
else
    echo "could no mount /boot in writeable mode!" >>"$LOG"
    touch /tmp/REG_RESCUE
    exit 1
fi
# Don't remount ro yet

# Display error with timeout
function display_error() {
    /usr/bin/plymouth display-message --text="ERROR! Please check the log at: /boot/rescue.log"
    sleep 5
    cp --backup=simple "$LOG" /boot/
    touch /boot/REG_RESCUE
    exit 1
}

# UI Output with plymouth
function plymouth_output() {
    local percent="$1"
    local text="$2"

    /usr/bin/plymouth system-update --progress "$percent"
    /usr/bin/plymouth display-message --text="$text"
}

# Executing parameters and watch background pid
# Changes text messages parsed to dialog --mixedgauge
function cmdoutput() {
    local text="$3"
    local cmd="$2"
    local percent="$1"
    local pid ret

    echo "cmd: $cmd" >>"$LOG"
    $cmd >>"$LOG" 2>&1 &
    pid=$!
    plymouth_output "$percent" "$text"
    wait $pid
    ret=$?
    echo "cmd code:$ret" >>"$LOG"
    if [ $ret -ne 0 ]; then
        display_error
    fi
    return $ret
}

# Remove the trigger(s)
function remove_trigger() {
    local trigger="$1"
    sed -i -e "s/^[ ]*${trigger}/#${trigger}/g" "${BOOTCONF}"
}

# Edit given file with new boot partition UUID
function replaceuuid() {
    # First try to replace label=REGLINUX with uuid=*, just in case we are updating a very old disk
    find "/boot/" -type f \( -iname "LinuxLoader.cfg" -o -iname "extlinux.conf" -o -iname "cmdline.txt" -o -iname "boot.ini" -o -iname "uEnv.txt" -o -iname "syslinux.cfg" -o -iname "grub.cfg" \) -exec sed -i "s/label=REGLINUX/uuid=${NEWUUID}/g;s/uuid=[a-fA-F0-9-]*/uuid=${NEWUUID}/g" {} \+
    if [ -f /boot/boot.scr ] && [ -f /boot/rebuild-boot-script.sh ]; then
        bash /boot/rebuild-boot-script.sh
    fi
}

function extractupgradefiles() {
    # First check if rescue was already upgraded
    # should have, if using system-upgrade, but not if manually placing upgrade file in /userdata/system/upgrade/
    if [ -f /boot/upgrade.list ]; then
        # Try to free some space before extracting
        while read -r line || [ -n "$line" ]; do
            rm -f "/boot/${line%.update}"
        done < /boot/upgrade.list

        ((CURRENTSTEP += 50))
        plymouth_output  $((CURRENTSTEP / TOTALSTEPS)) "Extracting files to upgrade REG-linux OS"
        if tar --zstd -C /boot/ --no-same-owner -xf "${SHAREMOUNT}/system/upgrade/boot-${board}.tar.zst" --verbatim-files-from -T /boot/upgrade.list; then
            echo "Deleting /boot/upgrade.list"
            rm /boot/upgrade.list || display_error
        else
            echo "Error extracting upgrade files"
            display_error
        fi
    else
        # Upgrade rescue (first stage)
        if tar --zstd --exclude='system-boot.conf' --exclude='config.txt' -tf "${SHAREMOUNT}/system/upgrade/boot-${board}.tar.zst" > /tmp/upgrade.list && sed -i '\%/$%d' /tmp/upgrade.list && grep -qh '^' /tmp/upgrade.list; then
            # /tmp/upgrade.list has one file per line and we deleted lines with only folders
            if grep -q -m 1 'runbeforeupgrade.sh' /tmp/upgrade.list; then
                ((CURRENTSTEP += 50))
                plymouth_output  $((CURRENTSTEP / TOTALSTEPS)) "Running /tmp/runbeforeupgrade.sh"
                if tar -C /tmp/ --no-same-owner --zstd -xf "${SHAREMOUNT}/system/upgrade/boot-${board}.tar.zst" runbeforeupgrade.sh &>/dev/null; then
                    . /tmp/runbeforeupgrade.sh
                    sed -i '/runbeforeupgrade.sh/d' /tmp/upgrade.list
                else
                    echo "Error extracting file: runbeforeupgrade.sh"
                    display_error
                fi
            fi

            rescuelist=''
            while read -r line || [ -n "$line" ]; do
                rescuelist="${rescuelist} ${line}"
                sed -i "\%${line}%d" /tmp/upgrade.list
                [ "${line}" = "boot/firmware.update" ] && umount /lib/firmware
                rm -f "/boot/${line%.update}"       # Try to free some space before extracting
            done < <(grep -E 'boot/firmware.update|boot/initrd.lz4|boot/linux|boot/modules.update|boot/rescue.update' /tmp/upgrade.list)

            ((CURRENTSTEP += 50))
            plymouth_output  $((CURRENTSTEP / TOTALSTEPS)) "Extracting files to upgrade rescue"

            if tar --zstd -C /boot/ --no-same-owner -xf "${SHAREMOUNT}/system/upgrade/boot-${board}.tar.zst" ${rescuelist}; then
                ((CURRENTSTEP += 100))
                plymouth_output  $((CURRENTSTEP / TOTALSTEPS)) "Upgrade will resume after reboot..."
                if mv /tmp/upgrade.list /boot/upgrade.list; then
                    touch /boot/REG_UPDATE
                    sync
                    mount -o remount,ro /boot
                    sleep 2
                    shutdown -r now
                    exit 0
                else
                    echo "Error copying upgrade.list for second stage of reboot"
                    display_error
                fi
            else
                echo "Error extracting rescue files"
                display_error
            fi
        else
            echo "Error extracting rescue files"
            display_error
        fi
    fi

    ((CURRENTSTEP += 100))
    plymouth_output  $((CURRENTSTEP / TOTALSTEPS)) "Finishing upgrading REG-linux OS"
    # Do rename to avoid rebooting again in UPDATE mode
    [ -f /boot/boot/firmware.update ] && mv /boot/boot/firmware.update /boot/boot/firmware
    [ -f /boot/boot/modules.update ] && mv /boot/boot/modules.update /boot/boot/modules
    [ -f /boot/boot/reglinux.update ] && mv /boot/boot/reglinux.update /boot/boot/reglinux
}

plymouth_output 5 "Creating list of tasks"

TOTALSTEPS=0    # To help with progress bar
CURRENTSTEP=0   # use multiples of 100 (100, 200, 300, etc., instead of 1, 2, 3, etc.)
TASKS=0         # 1111
                # ^^^^
                # ||||_ Change UUID of boot partition
                # |||__ Resize (expand) share_internal partition
                # ||___ Format share_internal partition
                # |____ Finish upgrade

if grep -qE '^[ ]*newbootuuid[ ]*=[ ]*true[ ]*$' "${BOOTCONF}"; then
    ((TOTALSTEPS += 4))
    ((TASKS += 1))
fi

if grep -qE '^[ ]*autoresize[ ]*=[ ]*true[ ]*$' "${BOOTCONF}"; then
    ((TOTALSTEPS += 10))
    ((TASKS += 10))
fi

FORMAT_INTERNAL_TYPE=$(grep -m 1 -E '^[ ]*format-internal[ ]*=.*$' "${BOOTCONF}" | sed -e "s+^[ ]*format-internal[ ]*=[ ]*\(.*\)[ ]*$+\1+")
if [ -n "$FORMAT_INTERNAL_TYPE" ]; then
    ((TOTALSTEPS += 6))
    ((TASKS += 100))
fi

# Search for share_internal mount point
SHAREPART=$(/usr/bin/system-part share_internal)
if [ -n "$SHAREPART" ]; then
    # get the last mount point
    SHAREMOUNT=$(sed -n -e '\|^'"${SHAREPART}"' |h;g;$!d;s|^'"${SHAREPART}"' \([^ ]*\) .*|\1|p' /proc/mounts)
    # Mount share_internal if not yet mounted
    if [ -z "$SHAREMOUNT" ]; then
        SHAREMOUNT="/tmp/SHARE_INTERNAL"
        mkdir -p "$SHAREMOUNT"
        PARTTYPE=$(blkid -o value -s TYPE "$SHAREPART")
        echo "cmd: /usr/bin/system-mount \"${PARTTYPE}\" 1 \"$SHAREPART\" \"$SHAREMOUNT\"" >>"$LOG"
        if ! /usr/bin/system-mount "${PARTTYPE}" 1 "$SHAREPART" "$SHAREMOUNT" >>"$LOG" 2>&1; then
            SHAREMOUNT=""
        fi
    fi
    if [ -n "$SHAREMOUNT" ]; then
        # Search for upgrade file
        board=$(cat /boot/boot/system.board)
        if [ -f "${SHAREMOUNT}/system/upgrade/boot-${board}.tar.zst" ]; then
            ((TOTALSTEPS += 7))
            ((TASKS += 1000))
        fi
    fi
fi

### Tasks list done.
[ "$TASKS" -eq 0 ] && exit 0 # Greater than 0 if there is something to do

# Upgrade REG-linux if upgrade file found
if [ "$TASKS" -ge 1000 ]; then

    echo "Found update: ${SHAREMOUNT}/system/upgrade/boot-${board}.tar.zst" >>"$LOG"

    ((CURRENTSTEP += 100))
    cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "extractupgradefiles" "Extracting upgrade files"

    # Fix uuid
    ((CURRENTSTEP += 250))
    BOOTPART=$(/usr/bin/system-part boot)
    NEWUUID=$(blkid -o value -s UUID "$BOOTPART")
    if [ -n "$NEWUUID" ]; then
        echo "Updating boot files with boot partition UUID" >>"$LOG"
        cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "replaceuuid" "Updating UUID in boot files"
    else
        echo "Error getting UUID of boot partition" >>"$LOG"
        display_error
    fi
    mv "${SHAREMOUNT}/system/upgrade/boot-${board}.tar.zst" "${SHAREMOUNT}/system/upgrade/already-installed-boot-${board}.tar.zst"

    # Run /boot/runafterupgrade.sh if found, using current environment
    ((CURRENTSTEP += 100))
    [ -f /boot/runafterupgrade.sh ] && cmdoutput $((CURRENTSTEP / TOTALSTEPS)) ". /boot/runafterupgrade.sh" "Running 'after-upgrade' script" && rm -f /boot/runafterupgrade.sh
    ((TASKS -= 1000))
fi

# format internal share if wanted
if [ "$TASKS" -ge 100 ]; then
    # A previous failed format could leave SHARE partition unusable
    if [ -z "$SHAREPART" ]; then
        # If there is a partition in boot disk with NO LABEL and NO FILESYSTEM asume it was SHARE
        DISK=$(/usr/bin/system-part boot); DISK=$(/usr/bin/system-part prefix "$DISK")
        while read -r PARTITIONS || [ -n "$PARTITIONS" ]; do
            if [ "$(lsblk -no FSTYPE,LABEL "$PARTITIONS")" = " " ]; then
                SHAREPART="$PARTITIONS"
                break
            fi
        done < <(find /dev/ \( -wholename "${DISK}?" \) -or \( -wholename "${DISK}p?" \))
        if [ -z "$SHAREPART" ]; then
            echo "Could not find SHARE partition!" >>"$LOG"
            display_error
        fi
    fi
    echo "SHARE partition is $SHAREPART" >>"$LOG"
    # umount share_internal
    n=0
    until ! grep -m 1 -E  "^$SHAREPART " /proc/mounts; do
        if [ "$n" -gt 6 ]; then
            echo "Could not umount $SHAREPART" >>"$LOG"
            display_error
        fi
        ((n++))
        umount -A "$SHAREPART"
        sleep 1
    done

    ((CURRENTSTEP += 200))
    case "$FORMAT_INTERNAL_TYPE" in
    "btrfs")
        cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "mkfs.btrfs -L SHARE -f ${SHAREPART}" "Formatting to btrfs"
        ;;
    "ext4")
        cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "mkfs.ext4 -L SHARE -q -F -F ${SHAREPART}" "Formatting to ext4"
        ;;
    "exfat")
        cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "mkfs.exfat -n SHARE ${SHAREPART}" "Formatting to exfat"
        ;;
    "ntfs")
        cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "mkfs.exfat -n SHARE ${SHAREPART}" "Formatting to exfat first (to avoid ntfs bug)"
        cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "mkfs.ntfs -f -L SHARE ${SHAREPART}" "Formatting to ntfs"
        ;;
    *)
        echo "Invalid file system type: $FORMAT_INTERNAL_TYPE" >>"$LOG"
        display_error
        ;;
    esac
    # remove the trigger
    ((TASKS -= 100))
    ((CURRENTSTEP += 350))
    cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "remove_trigger format-internal" "Removing trigger"
fi

# only when resizing of share_internal is wanted (usually first boot only)
if [ "$TASKS" -ge 10 ]; then

    # /userdata partition
    PARTNUM=$(/usr/bin/system-part "share_internal_num")
    echo "Partition name: $SHAREPART & number: $PARTNUM" >>"$LOG"

    # boot disk
    DISK=$(/usr/bin/system-part prefix "${SHAREPART}")
    echo "Disk = $DISK" >>"$LOG"

    # only for ext4
    PARTTYPE=$(blkid -o value -s TYPE "${SHAREPART}")
    echo "Partition type = ${PARTTYPE}" >>"$LOG"
    if [ "${PARTTYPE}" = "ext4" ]; then

        # umount share_internal
        n=0
        while [ $n -lt 6 ] && grep -m 1 -E  "^$SHAREPART " /proc/mounts; do
            umount -A "$SHAREPART"
            sleep 1
            ((n++))
        done
        if grep -m 1 -E "^$SHAREPART " /proc/mounts; then
            display_error
        fi
        # partition table
        TABLETYPE=$(blkid -o value -s PTTYPE "${DISK}")
        echo "Disk partition table type = $TABLETYPE" >>"$LOG"

        # if GPT, move backup data structures to the end of the disk
        ((CURRENTSTEP += 50))
        if [ "${TABLETYPE}" = "gpt" ]; then
            echo "Moving 2nd GPT table to the end of the disk" >>"$LOG"
            cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "sgdisk -e ${DISK}" "Aligning GPT table"
        fi

        # resize the partition
        echo "Resizing the partition to 100%" >>"$LOG"
        ((CURRENTSTEP += 150))
        cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "parted -s -m -f ${DISK} resizepart ${PARTNUM} 100%" "Resizing partition"

        # update the kernel
        echo "Updating the kernel" >>"$LOG"
        ((CURRENTSTEP += 100))
        cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "partprobe ${DISK}" "Informing the Kernel"

        # check & resize the ext4 file system
        echo "Checking ext4 file system" >>"$LOG"
        ((CURRENTSTEP += 200))
        cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "e2fsck -f -p ${SHAREPART}" "Checking /userdata integrity"

        echo "Expanding ext4 the file system" >>"$LOG"
        ((CURRENTSTEP += 250))
        cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "resize2fs ${SHAREPART}" "Expanding the file system"

        echo "Checking ext4 file system" >>"$LOG"
        ((CURRENTSTEP += 200))
        cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "e2fsck -f -p ${SHAREPART}" "Checking ext4 file system"
    fi
    # remove the trigger
    ((TASKS -= 10))
    ((CURRENTSTEP += 100))
    cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "remove_trigger autoresize" "Removing trigger"
fi

# only when random UUID for boot partition is wanted (usually first boot only)
if [ "$TASKS" -ge 1 ]; then

    BOOTPART="$(/usr/bin/system-part boot)"

    echo "Changing UUID of boot partition to a new random UUID" >>"$LOG"
    ((CURRENTSTEP += 50))
    cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "fatlabel -i -r $BOOTPART" "Changing boot partition UUID"
    NEWUUID=$(blkid -c /dev/null -o value -s UUID "$BOOTPART")
    echo "New UUID: $NEWUUID" >>"$LOG"

    ((CURRENTSTEP += 100))
    if [ -n "$NEWUUID" ]; then
        echo "Updating boot files with new UUID" >>"$LOG"
        cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "replaceuuid" "Updating boot files with new UUID"
    else
        echo "Error getting UUID of boot partition" >>"$LOG"
        display_error
    fi

    # remove the trigger
    ((CURRENTSTEP += 200))
    cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "remove_trigger newbootuuid" "Removing trigger"
fi

# finally disk sync
echo "Final sync" >>"$LOG"
((CURRENTSTEP += 50))
cmdoutput $((CURRENTSTEP / TOTALSTEPS)) "sync" "Syncing disk data"

mount -o remount,ro /boot || true

#Cleanup, restore screen, set progress of last item to 100%
plymouth_output 100 "Finished... Rebooting..."
sleep 2
exit 0
